# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe 'Order creation', type: :request do
  it 'creates an Order and redirects to the Orders index page' do
    get '/orders/new'
    expect(response).to render_template(:new)

    post '/orders', params: { order: { control_number: 10 } }

    expect(response).to redirect_to(:orders)
    follow_redirect!

    expect(response).to render_template(:index)
    expect(response.body).to include('Order was successfully created.')
  end

  it 'does not render a different template' do
    get '/orders/new'
    expect(response).to_not render_template(:show)
  end
end


RSpec.describe 'Order state updating', type: :request do
  Order.all.destroy_all

  let(:make_orders) do
    post '/orders', params: { order: { control_number: 33 } }
    post '/orders', params: { order: { control_number: 66 } }
    post '/orders', params: { order: { control_number: 99 } }
  end

  it 'updates an order from Pending to Progressa and redirects to index' do
    make_orders
    get '/orders'
    expect(response.body.scan('Progress').size).to eq(1)
    put "/orders/#{Order.first.id}", params: { id: Order.first.id }
    expect(response).to redirect_to(:orders)
    follow_redirect!
    expect(response).to render_template(:index)
    expect(response.body.scan('Progress').size).to eq(2)
  end

  it 'updates an order from Progressa to Complete and redirects to index' do
    make_orders
    get '/orders'
    expect(response.body.scan('Complete').size).to eq(1)
    put "/orders/#{Order.first.id}", params: { id: Order.first.id }
    expect(response).to redirect_to(:orders)
    put "/orders/#{Order.first.id}", params: { id: Order.first.id }
    expect(response).to redirect_to(:orders)
    follow_redirect!
    expect(response).to render_template(:index)
    expect(response.body.scan('Complete').size).to eq(2)
  end

  it ' does not update an order from Complete to another state' do
    make_orders
    get '/orders'
    expect(response.body.scan('Complete').size).to eq(1)
    put "/orders/#{Order.first.id}", params: { id: Order.first.id }
    expect(response).to redirect_to(:orders)
    put "/orders/#{Order.first.id}", params: { id: Order.first.id }
    expect(response).to redirect_to(:orders)
    put "/orders/#{Order.first.id}", params: { id: Order.first.id }
    expect(response).to redirect_to(:orders)
    follow_redirect!
    expect(response).to render_template(:index)
    expect(response.body.scan('Complete').size).to eq(2)
  end
end

RSpec.describe 'Order filtering', type: :request do
  Order.all.destroy_all

  let(:make_orders) do
    post '/orders', params: { order: { control_number: 33 } }
    post '/orders', params: { order: { control_number: 66 } }
    post '/orders', params: { order: { control_number: 99 } }
  end

  it 'show an index page with all the Orders regardless of state' do
    make_orders
    get '/orders'
    expect(response).to render_template(:index)
    expect(response.body.scan('Show').size).to eq(3)
  end

  it 'show all pending state Orders' do
    make_orders
    get '/orders/filter/0'
    expect(response.body.scan('Show').size).to eq(3)
    expect(response.body.scan('Pending').size).to eq(4)
    expect(response.body.scan('Progress').size).to eq(1)
    expect(response.body.scan('Complete').size).to eq(1)
  end

  it 'show all Progress state Orders' do
    make_orders
    put "/orders/#{Order.first.id}", params: { id: Order.first.id }
    put "/orders/#{Order.last.id}", params: { id: Order.last.id }
    get '/orders/filter/1'
    expect(response.body.scan('Show').size).to eq(2)
    expect(response.body.scan('Pending').size).to eq(1)
    expect(response.body.scan('Progress').size).to eq(3)
    expect(response.body.scan('Complete').size).to eq(1)
  end

  it 'show all Progress state Orders' do
    make_orders
    put "/orders/#{Order.first.id}", params: { id: Order.first.id }
    put "/orders/#{Order.first.id}", params: { id: Order.first.id }
    get '/orders/filter/2'
    expect(response.body.scan('Show').size).to eq(1)
    expect(response.body.scan('Pending').size).to eq(1)
    expect(response.body.scan('Progress').size).to eq(1)
    expect(response.body.scan('Complete').size).to eq(2)
  end

  it 'show orders by control number' do
    make_orders
    get '/orders/controll/33'
    expect(response.body.scan('Show').size).to eq(1)
  end
end
